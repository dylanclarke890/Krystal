#include "Core/Application.hpp"
#include "Base/Pointers.hpp"
#include "Core/Debug/Macros.hpp"
#include "Core/Events/EventManager.hpp"
#include "Core/Platform.hpp"
#include "Core/Window.hpp"
#include "Core/WindowManager.hpp"

namespace Krys
{
  Application::Application(Unique<ApplicationContext> context, const ApplicationSettings &settings) noexcept
      : _context(std::move(context))
  {
    KRYS_ASSERT(_context, "Application context is null");
    KRYS_ASSERT(_context->GetWindowManager(), "Window manager is null");
    KRYS_ASSERT(_context->GetInputManager(), "Input manager is null");
    KRYS_ASSERT(_context->GetEventManager(), "Event manager is null");
    KRYS_ASSERT(settings.VSync || settings.Fps > 0, "FPS must be greater than 0 if VSync is disabled");

    _context->GetWindowManager()->Create(settings.Width, settings.Height, settings.Fps);
    _context->GetWindowManager()->GetCurrentWindow()->SetVSync(settings.VSync);
  }

  void Application::Run() noexcept
  {
    _running = true;

    float elapsedMs = 0;
    while (_running)
    {
      KRYS_SCOPED_PROFILER("Application::Tick");
      const int64 startCounter = Platform::GetTicks();
      {
        // Poll events and input devices
        _context->GetWindowManager()->GetCurrentWindow()->Poll();
        _context->GetInputManager()->PollDevices();

        // Poll events, including those generated by input devices
        _context->GetEventManager()->ProcessEvents();

        // Update the application
        Update(static_cast<float>(elapsedMs));
        Render();

        // Swap buffers to display the rendered frame
        _context->GetWindowManager()->GetCurrentWindow()->SwapBuffers();
      }
      int64 endCounter = Platform::GetTicks();
      elapsedMs = Platform::TicksToMilliseconds(endCounter - startCounter);

      // Cap the frame rate if vsync is disabled
      if (_context->GetWindowManager()->GetCurrentWindow()->VSync())
        continue;

      // CPU friendly way to cap the frame rate
      const float targetFrameTimeMs = 1'000.0f / _context->GetWindowManager()->GetCurrentWindow()->Fps();
      while (elapsedMs < targetFrameTimeMs - 2)
      {
        Platform::Sleep(1);
        endCounter = Platform::GetTicks();
        elapsedMs = Platform::TicksToMilliseconds(endCounter - startCounter);
      }

      do
      {
        std::this_thread::yield();
        endCounter = Platform::GetTicks();
        elapsedMs = Platform::TicksToMilliseconds(endCounter - startCounter);
      } while (elapsedMs < targetFrameTimeMs);
    }
  }
}