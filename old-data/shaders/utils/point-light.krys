float Shadows(
  vec3 fragmentPosition,
  vec3 lightPosition,
  float farPlane,
  samplerCube shadowMap
)
{
  vec3 sampleOffsetDirections[20] = vec3[20]
  (
    vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1), 
    vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
    vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
    vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
    vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
  );

  vec3 fragToLight = fragmentPosition - lightPosition;
  float currentDepth = length(fragToLight);

  const float bias       = 0.15;
  const int samples      = 20;
  const float diskRadius = 0.05;
  
  float shadow = 0.0;
  for (int i = 0; i < samples; i++)
  {
    float closestDepth = texture(shadowMap, fragToLight + sampleOffsetDirections[i] * diskRadius).r;
    closestDepth *= farPlane;   // undo mapping [0;1]
    if(currentDepth - bias > closestDepth)
      shadow += 1.0;
  }

  shadow /= float(samples); 
  return shadow;
}

vec3 Lighting(
  PointLight light,
  vec3 fragmentPosition,
  vec3 tangentFragmentPosition,
  vec3 tangentCameraPosition,
  vec3 tangentLightPosition,
  vec3 tangentNormal,
  vec3 diffuseSample,
  vec3 specularSample,
  float shininess,
  samplerCube shadowMap,
  float farPlane,
  bool useBlinnLighting
)
{
  if (!light.Enabled) return vec3(0.0);

  vec3 tangentLightDirection = normalize(tangentLightPosition - tangentFragmentPosition);

  vec3 ambient = vec3(light.Ambient) * diffuseSample;

  float diffuseFactor = max(dot(tangentNormal, tangentLightDirection), 0.0);
  vec3 diffuse = vec3(light.Diffuse) * diffuseFactor * diffuseSample;

  vec3 specular = Specular(
    tangentCameraPosition,
    tangentFragmentPosition,
    tangentLightDirection,
    tangentNormal,
    vec3(light.Specular),
    specularSample,
    shininess,
    useBlinnLighting
  );
  
  float attenuation = Attenuation(
    tangentLightPosition,
    tangentFragmentPosition,
    light.Linear,
    light.Quadratic,
    light.Constant
  );

  ambient *= attenuation;
  diffuse *= attenuation;
  specular *= attenuation;

  float shadow = Shadows(
    fragmentPosition,
    vec3(light.Position),
    farPlane,
    shadowMap
  );

  return (ambient + (1.0 - shadow) * (diffuse + specular)) * light.Intensity;
}
