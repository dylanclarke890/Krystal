vec3 Specular(
  vec3 tangentCameraPosition,
  vec3 tangentFragmentPosition,
  vec3 tangentLightDirection,
  vec3 tangentNormal,
  vec3 lightSpecular,
  vec3 specularSample,
  float shininess,
  bool useBlinnLighting
)
{
  vec3 viewDirection = normalize(tangentCameraPosition - tangentFragmentPosition);

  float factor = 0.0;
  if (useBlinnLighting)
  {
    vec3 halfwayDirection = normalize(tangentLightDirection + viewDirection);  
    factor = pow(max(dot(tangentNormal, halfwayDirection), 0.0), shininess);
  }
  else
  {
    vec3 reflectDirection = reflect(-tangentLightDirection, tangentNormal);
    factor = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);
  }

  return lightSpecular * factor * specularSample;
}