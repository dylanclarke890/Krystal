
vec3 Lighting(
  SpotLight light,
  vec3 tangentFragmentPosition,
  vec3 tangentCameraPosition,
  vec3 tangentLightPosition,
  vec3 tangentLightDirection, // Direction the light source is looking
  vec3 tangentNormal,
  vec3 diffuseSample,
  vec3 specularSample,
  float shininess,
  sampler2D shadowMap,
  bool useBlinnLighting
)
{
  if (!light.Enabled)
  {
    return vec3(0.0);
  }

  // This is the direction TO the light source
  vec3 lightDirection = normalize(tangentLightPosition - tangentFragmentPosition);

  float theta = dot(lightDirection, tangentLightDirection);
  float epsilon = light.InnerCutoff - light.OuterCutoff;
  float intensity = clamp((theta - light.OuterCutoff) / epsilon, 0.0, 1.0);
  
  vec3 ambient = vec3(light.Ambient) * diffuseSample;
  if (theta <= light.OuterCutoff)
  {
    return ambient * light.Intensity;
  }
  else
  {
    float diffuseFactor = max(dot(tangentNormal, lightDirection), 0.0);
    vec3 diffuse = vec3(light.Diffuse) * diffuseFactor * diffuseSample;

    vec3 specular = Specular(
      tangentCameraPosition,
      tangentFragmentPosition,
      lightDirection,
      tangentNormal,
      vec3(light.Specular),
      specularSample,
      shininess,
      useBlinnLighting
    );

    float attenuation = Attenuation(
      tangentLightPosition,
      tangentFragmentPosition,
      light.Linear,
      light.Quadratic,
      light.Constant
    );

    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;

    return (ambient + diffuse + specular) * light.Intensity;
  }
}