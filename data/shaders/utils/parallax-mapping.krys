vec2 ParallaxMapping(vec2 texCoords, vec3 viewDirection) 
{
  // number of depth layers
  const float minLayers = 32;
  const float maxLayers = 64;
  const float heightScale = 0.1;

  float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDirection)));  
  float layerDepth = 1.0 / numLayers; // size of each layer
  float currentLayerDepth = 0.0;

  // the amount to shift the texture coordinates per layer (from vector P)
  vec2 P = viewDirection.xy / viewDirection.z * heightScale; 
  vec2 deltaTexCoords = P / numLayers;

  vec2  currentTexCoords     = texCoords;
  float currentDepthMapValue = GetTextureSample(v_DisplacementSlot, vec4(1.0), texCoords).r;
    
  while (currentLayerDepth < currentDepthMapValue)
  {
    currentTexCoords -= deltaTexCoords; // shift texture coordinates along direction of P
    currentDepthMapValue = GetTextureSample(v_DisplacementSlot, vec4(1.0), currentTexCoords).r;
    // get depth of next layer
    currentLayerDepth += layerDepth;  
  }

  // get texture coordinates before collision (reverse operations)
  vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

  // get depth after and before collision for linear interpolation
  float afterDepth  = currentDepthMapValue - currentLayerDepth;
  float beforeDepth = GetTextureSample(v_DisplacementSlot, vec4(1.0), prevTexCoords).r - currentLayerDepth + layerDepth;

  // interpolation of texture coordinates
  float weight = afterDepth / (afterDepth - beforeDepth);
  vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);

  if (finalTexCoords.x > 1.0 || finalTexCoords.y > 1.0 || finalTexCoords.x < 0.0 || finalTexCoords.y < 0.0)
    discard;

  return finalTexCoords;
}
