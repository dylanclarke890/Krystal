float Shadows(
  vec4 lightFragmentPosition,
  vec3 tangentLightDirection,
  vec3 tangentNormal,
  sampler2D shadowMap
)
{
  vec3 projectionCoords = lightFragmentPosition.xyz / lightFragmentPosition.w; // perform perspective divide
  projectionCoords = projectionCoords * 0.5 + 0.5; // transform to [0,1] range
  if (projectionCoords.z > 1.0)
  {
    return 0.0;
  } 

  float closestDepth = texture(shadowMap, projectionCoords.xy).r; // get closest depth value from light's perspective
  float currentDepth = projectionCoords.z;

  float bias = max(0.05 * (1.0 - dot(tangentNormal, tangentLightDirection)), 0.005);
  vec2 texelSize = 1.0 / textureSize(shadowMap, 0);

  float shadow = 0.0;
  // PCF
  for (int x = -1; x <= 1; x++)
  {
    for (int y = -1; y <= 1; y++)
    {
      float pcfDepth = texture(shadowMap, projectionCoords.xy + vec2(x, y) * texelSize).r; 
      shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
    }    
  }

  shadow /= 9.0; // average the samples taken above
  return shadow;
}

float Shadows(vec4 lightSpacePosition, sampler2D shadowMap, vec3 normal, vec3 lightDir)
{
  // Perform perspective divide
  vec3 projCoords = lightSpacePosition.xyz / lightSpacePosition.w;
  // Transform to [0,1] range
  projCoords = projCoords * 0.5 + 0.5;

  // Discard fragments outside the light's frustum
  if (projCoords.z > 1.0)
      return 0.0;

  // Get closest depth value from the shadow map
  float closestDepth = texture(shadowMap, projCoords.xy).r;

  // Current depth
  float currentDepth = projCoords.z;

  // Bias to prevent shadow acne
  float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);

  // Shadow calculation
  float shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;

  // Optionally apply Percentage Closer Filtering (PCF) for smoother shadows

  return shadow;
}