#import "utils/shadows.krys";

vec3 Lighting(
  DirectionalLight light,
  vec4 lightFragmentPosition,
  vec3 tangentFragmentPosition,
  vec3 tangentCameraPosition,
  vec3 tangentLightDirection,
  vec3 tangentNormal,
  vec3 diffuseSample,
  vec3 specularSample,
  float shininess,
  sampler2D shadowMap,
  bool useBlinnLighting
)
{
  if (!light.Enabled)
  {
    return vec3(0.0);
  }

  tangentLightDirection = normalize(tangentLightDirection);

  vec3 ambient = vec3(light.Ambient) * diffuseSample;

  float diffuseFactor = max(dot(tangentNormal, tangentLightDirection), 0.0);
  vec3 diffuse = vec3(light.Diffuse) * diffuseFactor * diffuseSample;

  vec3 specular = Specular(
    tangentCameraPosition,
    tangentFragmentPosition,
    tangentLightDirection,
    tangentNormal,
    vec3(light.Specular),
    specularSample,
    shininess,
    useBlinnLighting
  );
  
  float shadow = Shadows(lightFragmentPosition, tangentLightDirection, tangentNormal, shadowMap);
  
  return (ambient + (1.0 - shadow) * (diffuse + specular)) * light.Intensity;
}